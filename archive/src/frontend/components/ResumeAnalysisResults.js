import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { formatDistance } from "date-fns";
import { Card, CardContent } from "@/components/ui/card";
import { BarChart4, CheckCircle, Code, Heart, FileSpreadsheet, KeySquare } from "lucide-react";
const ResumeAnalysisResults = ({ results, className = "" }) => {
    // Calculate when the analysis was performed
    const timestamp = results.timestamp || new Date().toISOString();
    const timeAgo = formatDistance(new Date(timestamp), new Date(), { addSuffix: true });
    // Helper function to get background and border color based on score
    const getScoreBoxStyles = (score) => {
        if (score >= 80)
            return "bg-emerald-50/70 border-emerald-100";
        if (score >= 60)
            return "bg-amber-50/70 border-amber-100";
        return "bg-red-50/70 border-red-100";
    };
    // Helper function to get score label based on score
    const getScoreLabel = (score, type) => {
        if (type === 'overall') {
            return score >= 80 ? 'Excellent' : score >= 60 ? 'Good' : 'Needs Work';
        }
        else if (type === 'keyword') {
            return score >= 80 ? 'Perfect Match' : score >= 60 ? 'Aligned' : 'Misaligned';
        }
        else if (type === 'relevance') {
            return score >= 80 ? 'Compelling' : score >= 60 ? 'Convincing' : 'Basic';
        }
        else {
            return score >= 80 ? 'Crystal Clear' : score >= 60 ? 'Clear' : 'Unclear';
        }
    };
    // Generate a clarity score (for fourth score box) - using average of other scores
    const clarityScore = Math.round((results.overallScore + results.keywordMatchScore + results.relevanceScore) / 3);
    return (_jsx(Card, { className: `overflow-hidden border-slate-200 ${className}`, children: _jsxs(CardContent, { className: "pt-6", children: [_jsxs("div", { className: "flex justify-between items-center mb-3", children: [_jsxs("h3", { className: "text-xl font-semibold text-primary/90 flex items-center analysis-header", children: [_jsx(BarChart4, { className: "h-5 w-5 mr-2" }), "AI Analysis Results"] }), _jsxs("span", { className: "text-xs text-neutral-500 flex items-center", children: [_jsx(CheckCircle, { className: "h-3 w-3 mr-1 text-green-500" }), "Analyzed ", timeAgo] })] }), _jsxs("div", { className: "space-y-5", children: [_jsxs("div", { className: "grid grid-cols-2 sm:grid-cols-4 gap-3", children: [_jsxs("div", { className: `flex flex-col items-center p-3 rounded-lg border score-box ${getScoreBoxStyles(results.overallScore)}`, title: "Overall score reflecting the quality of your resume", children: [_jsx("span", { className: "text-xl font-bold", children: Math.round(results.overallScore) }), _jsx("span", { className: "text-xs text-neutral-500", children: "Overall" }), _jsx("span", { className: "text-xs mt-1 font-medium text-center px-2 py-0.5 rounded-full text-neutral-700 bg-white/70", children: getScoreLabel(results.overallScore, 'overall') })] }), _jsxs("div", { className: `flex flex-col items-center p-3 rounded-lg border score-box ${getScoreBoxStyles(results.keywordMatchScore)}`, title: "How well your resume aligns with the job requirements", children: [_jsx("span", { className: "text-xl font-bold", children: Math.round(results.keywordMatchScore) }), _jsx("span", { className: "text-xs text-neutral-500", children: "Alignment" }), _jsx("span", { className: "text-xs mt-1 font-medium text-center px-2 py-0.5 rounded-full text-neutral-700 bg-white/70", children: getScoreLabel(results.keywordMatchScore, 'keyword') })] }), _jsxs("div", { className: `flex flex-col items-center p-3 rounded-lg border score-box ${getScoreBoxStyles(results.relevanceScore)}`, title: "How persuasive and compelling your resume is", children: [_jsx("span", { className: "text-xl font-bold", children: Math.round(results.relevanceScore) }), _jsx("span", { className: "text-xs text-neutral-500", children: "Persuasive" }), _jsx("span", { className: "text-xs mt-1 font-medium text-center px-2 py-0.5 rounded-full text-neutral-700 bg-white/70", children: getScoreLabel(results.relevanceScore, 'relevance') })] }), _jsxs("div", { className: `flex flex-col items-center p-3 rounded-lg border score-box ${getScoreBoxStyles(clarityScore)}`, title: "Clarity and readability of your writing", children: [_jsx("span", { className: "text-xl font-bold", children: clarityScore }), _jsx("span", { className: "text-xs text-neutral-500", children: "Clarity" }), _jsx("span", { className: "text-xs mt-1 font-medium text-center px-2 py-0.5 rounded-full text-neutral-700 bg-white/70", children: getScoreLabel(clarityScore, 'clarity') })] })] }), _jsxs("div", { children: [_jsxs("h4", { className: "text-sm font-medium mb-2 flex items-center", children: [_jsx("span", { className: "text-emerald-500 mr-1", children: "\u2713" }), " Strengths"] }), _jsx("ul", { className: "list-disc pl-5 space-y-1 text-sm bg-emerald-50/50 p-2 rounded-md border border-emerald-100/50", children: results.strengths.map((strength, index) => (_jsx("li", { className: "text-neutral-700", children: strength }, `strength-${index}`))) })] }), _jsxs("div", { children: [_jsxs("h4", { className: "text-sm font-medium mb-2 flex items-center", children: [_jsx("span", { className: "text-amber-500 mr-1", children: "\u26A0\uFE0F" }), " Areas to Improve"] }), _jsx("ul", { className: "list-disc pl-5 space-y-1 text-sm bg-amber-50/50 p-2 rounded-md border border-amber-100/50", children: results.weaknesses.map((weakness, index) => (_jsx("li", { className: "text-neutral-700", children: weakness }, `weakness-${index}`))) })] }), _jsxs("div", { children: [_jsxs("h4", { className: "text-sm font-medium mb-2 flex items-center", children: [_jsx("span", { className: "text-blue-500 mr-1", children: "\uD83D\uDCA1" }), " Suggestions"] }), _jsx("ul", { className: "list-disc pl-5 space-y-1 text-sm bg-blue-50/50 p-2 rounded-md border border-blue-100/50", children: results.improvementSuggestions.map((suggestion, index) => (_jsx("li", { className: "text-neutral-700", children: suggestion }, `suggestion-${index}`))) })] }), results.missingKeywords.length > 0 && (_jsxs("div", { children: [_jsxs("h4", { className: "text-sm font-medium mb-2 flex items-center", children: [_jsx(KeySquare, { className: "h-4 w-4 mr-1 text-amber-600" }), " Missing Keywords"] }), _jsx("div", { className: "flex flex-wrap gap-2 bg-amber-50/50 p-2 rounded-md border border-amber-100/50", children: results.missingKeywords.map((keyword, index) => (_jsx("span", { className: "bg-amber-100/80 text-amber-800 px-2 py-0.5 rounded-full text-xs font-medium", children: keyword }, `keyword-${index}`))) })] })), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [_jsxs("div", { children: [_jsxs("h4", { className: "text-sm font-medium mb-2 flex items-center", children: [_jsx(Code, { className: "h-4 w-4 mr-1 text-violet-600" }), " Technical Skills"] }), _jsx("ul", { className: "list-disc pl-5 space-y-1 text-sm bg-violet-50/50 p-2 rounded-md border border-violet-100/50", children: results.technicalSkillAssessment.map((skill, index) => (_jsx("li", { className: "text-neutral-700", children: skill }, `tech-${index}`))) })] }), _jsxs("div", { children: [_jsxs("h4", { className: "text-sm font-medium mb-2 flex items-center", children: [_jsx(Heart, { className: "h-4 w-4 mr-1 text-pink-600" }), " Soft Skills"] }), _jsx("ul", { className: "list-disc pl-5 space-y-1 text-sm bg-pink-50/50 p-2 rounded-md border border-pink-100/50", children: results.softSkillAssessment.map((skill, index) => (_jsx("li", { className: "text-neutral-700", children: skill }, `soft-${index}`))) })] })] }), _jsxs("div", { children: [_jsxs("h4", { className: "text-sm font-medium mb-2 flex items-center", children: [_jsx(FileSpreadsheet, { className: "h-4 w-4 mr-1 text-teal-600" }), " Formatting Feedback"] }), _jsx("ul", { className: "list-disc pl-5 space-y-1 text-sm bg-teal-50/50 p-2 rounded-md border border-teal-100/50", children: results.formattingFeedback.map((feedback, index) => (_jsx("li", { className: "text-neutral-700", children: feedback }, `format-${index}`))) })] })] })] }) }));
};
export default ResumeAnalysisResults;
