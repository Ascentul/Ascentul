import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { useUser } from "@/lib/useUserData";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Progress } from "@/components/ui/progress";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { User as UserIcon, Briefcase, GraduationCap, Award, Globe, Mail, Github, Linkedin, Twitter, MapPin, Building, Star, Clock, Calendar, Edit, Plus } from "lucide-react";
// This is a demo component to show what a profile page might look like
export default function Profile() {
    const { user } = useUser();
    const [activeTab, setActiveTab] = useState("about");
    const [isEditing, setIsEditing] = useState(false);
    // Fetch real career data instead of using mock data
    const { data: careerData } = useQuery({
        queryKey: ["/api/career-data"],
        enabled: !!user
    });
    // Fetch user statistics
    const { data: statistics } = useQuery({
        queryKey: ["/api/users/statistics"],
        enabled: !!user
    });
    // Fetch XP history
    const { data: xpHistory } = useQuery({
        queryKey: ["/api/users/xp-history"],
        enabled: !!user
    });
    // Fetch achievements
    const { data: achievements } = useQuery({
        queryKey: ["/api/achievements/user"],
        enabled: !!user
    });
    // Handle UI interactions
    const handleEditToggle = () => {
        setIsEditing(!isEditing);
    };
    const handleConnect = () => {
        alert("Connection request sent!");
    };
    const handleAddExperience = () => {
        alert("Experience form would open here");
    };
    const handleAddEducation = () => {
        alert("Education form would open here");
    };
    const handleAddSkill = () => {
        alert("Skill form would open here");
    };
    const handleEditItem = (itemType, id) => {
        alert(`Editing ${itemType} with ID: ${id}`);
    };
    // Placeholder profile completeness
    const profileCompleteness = 85;
    if (!user) {
        return (_jsx("div", { className: "flex items-center justify-center h-[calc(100vh-64px)]", children: _jsx("p", { children: "Please log in to view your profile" }) }));
    }
    return (_jsxs("div", { className: "container mx-auto py-6 max-w-5xl", children: [_jsxs("div", { className: "relative mb-24", children: [_jsx("div", { className: "h-48 w-full bg-gradient-to-r from-primary/30 to-primary rounded-t-lg" }), _jsxs("div", { className: "absolute -bottom-16 left-8 flex gap-4 items-end", children: [_jsx(Avatar, { className: "h-32 w-32 border-4 border-background", children: _jsx(AvatarFallback, { className: "text-4xl bg-primary/20", children: user.name.charAt(0) }) }), _jsxs("div", { className: "mb-4", children: [_jsx("h1", { className: "text-2xl font-bold", children: user.name }), _jsx("p", { className: "text-muted-foreground", children: careerData?.careerSummary?.jobTitle || "Add your job title" })] })] }), _jsxs("div", { className: "absolute bottom-4 right-8 flex gap-2", children: [_jsxs(Button, { variant: "outline", size: "sm", onClick: handleEditToggle, children: [_jsx(Edit, { className: "h-4 w-4 mr-2" }), "Edit Profile"] }), _jsxs(Button, { size: "sm", onClick: handleConnect, children: [_jsx(Plus, { className: "h-4 w-4 mr-2" }), "Connect"] })] })] }), _jsxs("div", { className: "flex items-center justify-between mb-6 px-4", children: [_jsxs("div", { className: "flex items-center gap-6", children: [user.location && (_jsxs("div", { className: "flex items-center gap-1 text-muted-foreground", children: [_jsx(MapPin, { className: "h-4 w-4" }), _jsx("span", { children: user.location })] })), careerData?.careerSummary?.industry && (_jsxs("div", { className: "flex items-center gap-1 text-muted-foreground", children: [_jsx(Building, { className: "h-4 w-4" }), _jsx("span", { children: careerData.careerSummary.industry })] })), careerData?.careerSummary?.experienceLevel && (_jsxs("div", { className: "flex items-center gap-1 text-muted-foreground", children: [_jsx(Clock, { className: "h-4 w-4" }), _jsx("span", { children: careerData.careerSummary.experienceLevel })] }))] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Badge, { variant: "outline", className: "bg-green-50 text-green-600 hover:bg-green-50", children: "Open to Work" }), _jsxs(Badge, { className: "bg-primary/20 hover:bg-primary/30 text-primary", children: ["Level ", user.level] }), _jsx(Badge, { variant: "outline", children: user.rank })] })] }), _jsx(Card, { className: "mb-6", children: _jsxs(CardContent, { className: "pt-6", children: [_jsxs("div", { className: "flex justify-between items-center mb-2", children: [_jsx("p", { className: "text-sm font-medium", children: "Profile Completeness" }), _jsxs("span", { className: "text-sm font-medium", children: [profileCompleteness, "%"] })] }), _jsx(Progress, { value: profileCompleteness, className: "h-2" }), _jsx("p", { className: "mt-2 text-xs text-muted-foreground", children: "Complete your profile to attract more opportunities" })] }) }), _jsxs(Tabs, { defaultValue: "about", className: "mb-8", onValueChange: setActiveTab, children: [_jsxs(TabsList, { className: "mb-6", children: [_jsxs(TabsTrigger, { value: "about", children: [_jsx(UserIcon, { className: "mr-2 h-4 w-4" }), "About"] }), _jsxs(TabsTrigger, { value: "experience", children: [_jsx(Briefcase, { className: "mr-2 h-4 w-4" }), "Experience"] }), _jsxs(TabsTrigger, { value: "education", children: [_jsx(GraduationCap, { className: "mr-2 h-4 w-4" }), "Education"] }), _jsxs(TabsTrigger, { value: "skills", children: [_jsx(Star, { className: "mr-2 h-4 w-4" }), "Skills"] }), _jsxs(TabsTrigger, { value: "achievements", children: [_jsx(Award, { className: "mr-2 h-4 w-4" }), "Achievements"] })] }), _jsx(TabsContent, { value: "about", children: _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex justify-between items-center", children: [_jsx("span", { children: "About Me" }), _jsxs(Button, { variant: "ghost", size: "sm", onClick: () => setIsEditing(true), children: [_jsx(Edit, { className: "h-4 w-4 mr-2" }), "Edit"] })] }) }), _jsxs(CardContent, { children: [_jsx("p", { className: "text-sm text-muted-foreground mb-6", children: careerData?.careerSummary?.summary ||
                                                "Add a career summary to tell others about your background and goals." }), _jsx("h3", { className: "text-sm font-medium mb-2", children: "Languages" }), _jsx("div", { className: "flex flex-wrap gap-2 mb-6", children: careerData?.languages && careerData.languages.length > 0 ? (careerData.languages.map((lang) => (_jsxs(Badge, { variant: "outline", children: [lang.name, " (", lang.proficiencyLevel, ")"] }, lang.id)))) : (_jsx("p", { className: "text-sm text-muted-foreground", children: "No languages added yet" })) }), _jsx("h3", { className: "text-sm font-medium mb-2", children: "Top Skills" }), _jsx("div", { className: "flex flex-wrap gap-2 mb-6", children: careerData?.skills && careerData.skills.length > 0 ? (careerData.skills
                                                .slice(0, 8)
                                                .map((skill) => (_jsx(Badge, { children: skill.name }, skill.id)))) : (_jsx("p", { className: "text-sm text-muted-foreground", children: "No skills added yet" })) }), _jsx("h3", { className: "text-sm font-medium mb-2", children: "Connect" }), _jsxs("div", { className: "flex gap-3", children: [_jsx(Button, { variant: "outline", size: "icon", onClick: () => window.open("mailto:user@example.com"), children: _jsx(Mail, { className: "h-4 w-4" }) }), _jsx(Button, { variant: "outline", size: "icon", onClick: () => window.open("https://linkedin.com", "_blank"), children: _jsx(Linkedin, { className: "h-4 w-4" }) }), _jsx(Button, { variant: "outline", size: "icon", onClick: () => window.open("https://github.com", "_blank"), children: _jsx(Github, { className: "h-4 w-4" }) }), _jsx(Button, { variant: "outline", size: "icon", onClick: () => window.open("https://twitter.com", "_blank"), children: _jsx(Twitter, { className: "h-4 w-4" }) }), _jsx(Button, { variant: "outline", size: "icon", onClick: () => window.open("https://example.com", "_blank"), children: _jsx(Globe, { className: "h-4 w-4" }) })] })] })] }) }), _jsx(TabsContent, { value: "experience", children: _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex justify-between items-center", children: [_jsx("span", { children: "Work Experience" }), _jsxs(Button, { variant: "ghost", size: "sm", onClick: handleAddExperience, children: [_jsx(Plus, { className: "h-4 w-4 mr-2" }), "Add Experience"] })] }) }), _jsx(CardContent, { children: _jsx("div", { className: "space-y-6", children: careerData?.workHistory &&
                                            careerData.workHistory.length > 0 ? (careerData.workHistory.map((work, index) => (_jsxs("div", { children: [_jsxs("div", { className: "flex gap-4", children: [_jsx("div", { className: "w-12 h-12 bg-primary/10 rounded-md flex items-center justify-center", children: _jsx(Briefcase, { className: "h-6 w-6 text-primary" }) }), _jsxs("div", { className: "flex-1", children: [_jsxs("div", { className: "flex justify-between", children: [_jsx("h3", { className: "font-medium", children: work.position }), _jsx("div", { className: "flex items-center gap-1", children: _jsxs(Button, { variant: "ghost", size: "icon", className: "h-8 w-8", onClick: () => handleEditItem("experience", work.id), children: [_jsx("span", { className: "sr-only", children: "Edit" }), _jsx(Edit, { className: "h-4 w-4" })] }) })] }), _jsx("p", { className: "text-sm text-muted-foreground", children: work.company }), _jsxs("div", { className: "flex items-center gap-2 text-xs text-muted-foreground mt-1", children: [_jsx(Calendar, { className: "h-3 w-3" }), _jsxs("span", { children: [new Date(work.startDate).toLocaleDateString("en-US", { month: "short", year: "numeric" }), " ", "-", " ", work.endDate
                                                                                    ? new Date(work.endDate).toLocaleDateString("en-US", { month: "short", year: "numeric" })
                                                                                    : "Present"] }), !work.endDate && (_jsx(Badge, { variant: "outline", className: "text-xs", children: "Current" }))] }), work.description && (_jsx("p", { className: "mt-2 text-sm", children: work.description })), work.technologies &&
                                                                    work.technologies.length > 0 && (_jsx("div", { className: "flex flex-wrap gap-1 mt-2", children: work.technologies.map((tech, techIndex) => (_jsx(Badge, { variant: "outline", className: "text-xs", children: tech }, techIndex))) }))] })] }), index < careerData.workHistory.length - 1 && (_jsx(Separator, {}))] }, work.id)))) : (_jsx("p", { className: "text-sm text-muted-foreground", children: "No work experience added yet" })) }) })] }) }), _jsx(TabsContent, { value: "education", children: _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex justify-between items-center", children: [_jsx("span", { children: "Education" }), _jsxs(Button, { variant: "ghost", size: "sm", onClick: handleAddEducation, children: [_jsx(Plus, { className: "h-4 w-4 mr-2" }), "Add Education"] })] }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-6", children: [careerData?.educationHistory &&
                                                careerData.educationHistory.length > 0
                                                ? careerData.educationHistory.map((education, index) => (_jsxs("div", { children: [_jsxs("div", { className: "flex gap-4", children: [_jsx("div", { className: "w-12 h-12 bg-primary/10 rounded-md flex items-center justify-center", children: _jsx(GraduationCap, { className: "h-6 w-6 text-primary" }) }), _jsxs("div", { className: "flex-1", children: [_jsxs("div", { className: "flex justify-between", children: [_jsxs("h3", { className: "font-medium", children: [education.degree, " ", education.fieldOfStudy &&
                                                                                            `in ${education.fieldOfStudy}`] }), _jsx("div", { className: "flex items-center gap-1", children: _jsxs(Button, { variant: "ghost", size: "icon", className: "h-8 w-8", onClick: () => handleEditItem("education", education.id), children: [_jsx("span", { className: "sr-only", children: "Edit" }), _jsx(Edit, { className: "h-4 w-4" })] }) })] }), _jsx("p", { className: "text-sm text-muted-foreground", children: education.institution }), _jsxs("div", { className: "flex items-center gap-2 text-xs text-muted-foreground mt-1", children: [_jsx(Calendar, { className: "h-3 w-3" }), _jsxs("span", { children: [new Date(education.startDate).getFullYear(), " ", "-", " ", education.endDate
                                                                                            ? new Date(education.endDate).getFullYear()
                                                                                            : "Present"] })] }), education.description && (_jsx("p", { className: "mt-2 text-sm", children: education.description }))] })] }), index < careerData.educationHistory.length - 1 && (_jsx(Separator, {}))] }, education.id)))
                                                : null, careerData?.certifications &&
                                                careerData.certifications.length > 0 && (_jsxs(_Fragment, { children: [careerData?.educationHistory &&
                                                        careerData.educationHistory.length > 0 && _jsx(Separator, {}), careerData.certifications.map((cert, index) => (_jsxs("div", { children: [_jsxs("div", { className: "flex gap-4", children: [_jsx("div", { className: "w-12 h-12 bg-primary/10 rounded-md flex items-center justify-center", children: _jsx(Award, { className: "h-6 w-6 text-primary" }) }), _jsxs("div", { className: "flex-1", children: [_jsxs("div", { className: "flex justify-between", children: [_jsx("h3", { className: "font-medium", children: cert.name }), _jsx("div", { className: "flex items-center gap-1", children: _jsxs(Button, { variant: "ghost", size: "icon", className: "h-8 w-8", onClick: () => handleEditItem("certification", cert.id), children: [_jsx("span", { className: "sr-only", children: "Edit" }), _jsx(Edit, { className: "h-4 w-4" })] }) })] }), _jsx("p", { className: "text-sm text-muted-foreground", children: cert.issuer }), _jsxs("div", { className: "flex items-center gap-2 text-xs text-muted-foreground mt-1", children: [_jsx(Calendar, { className: "h-3 w-3" }), _jsxs("span", { children: ["Issued", " ", new Date(cert.dateEarned).toLocaleDateString("en-US", {
                                                                                                month: "short",
                                                                                                year: "numeric"
                                                                                            }), cert.expirationDate &&
                                                                                                ` · Expires ${new Date(cert.expirationDate).toLocaleDateString("en-US", {
                                                                                                    month: "short",
                                                                                                    year: "numeric"
                                                                                                })}`] })] }), cert.description && (_jsx("p", { className: "mt-2 text-sm", children: cert.description }))] })] }), index < careerData.certifications.length - 1 && (_jsx(Separator, {}))] }, cert.id)))] })), (!careerData?.educationHistory ||
                                                careerData.educationHistory.length === 0) &&
                                                (!careerData?.certifications ||
                                                    careerData.certifications.length === 0) && (_jsx("p", { className: "text-sm text-muted-foreground text-center py-8", children: "No education or certifications added yet" }))] }) })] }) }), _jsx(TabsContent, { value: "skills", children: _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex justify-between items-center", children: [_jsx("span", { children: "Skills & Endorsements" }), _jsxs(Button, { variant: "ghost", size: "sm", onClick: handleAddSkill, children: [_jsx(Plus, { className: "h-4 w-4 mr-2" }), "Add Skill"] })] }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-6", children: [careerData?.skills &&
                                                careerData.skills.filter((skill) => skill.category === "technical").length > 0 && (_jsxs("div", { children: [_jsx("h3", { className: "font-medium mb-3", children: "Technical Skills" }), _jsx("div", { className: "space-y-4", children: careerData.skills
                                                            .filter((skill) => skill.category === "technical")
                                                            .map((skill) => (_jsxs("div", { children: [_jsxs("div", { className: "flex justify-between mb-1", children: [_jsx("span", { className: "text-sm font-medium", children: skill.name }), _jsx("span", { className: "text-xs text-muted-foreground", children: skill.proficiencyLevel || "Beginner" })] }), _jsx("div", { className: "h-2 bg-primary/10 rounded-full", children: _jsx("div", { className: "h-2 bg-primary rounded-full", style: {
                                                                            width: `${skill.proficiencyLevel === "Expert"
                                                                                ? 90
                                                                                : skill.proficiencyLevel === "Advanced"
                                                                                    ? 75
                                                                                    : skill.proficiencyLevel ===
                                                                                        "Intermediate"
                                                                                        ? 60
                                                                                        : 40}%`
                                                                        } }) })] }, skill.id))) })] })), careerData?.skills &&
                                                careerData.skills.filter((skill) => skill.category === "soft").length > 0 && (_jsxs(_Fragment, { children: [careerData.skills.filter((skill) => skill.category === "technical").length > 0 && _jsx(Separator, {}), _jsxs("div", { children: [_jsx("h3", { className: "font-medium mb-3", children: "Soft Skills" }), _jsx("div", { className: "space-y-4", children: careerData.skills
                                                                    .filter((skill) => skill.category === "soft")
                                                                    .map((skill) => (_jsxs("div", { children: [_jsxs("div", { className: "flex justify-between mb-1", children: [_jsx("span", { className: "text-sm font-medium", children: skill.name }), _jsx("span", { className: "text-xs text-muted-foreground", children: skill.proficiencyLevel || "Beginner" })] }), _jsx("div", { className: "h-2 bg-primary/10 rounded-full", children: _jsx("div", { className: "h-2 bg-primary rounded-full", style: {
                                                                                    width: `${skill.proficiencyLevel === "Expert"
                                                                                        ? 90
                                                                                        : skill.proficiencyLevel ===
                                                                                            "Advanced"
                                                                                            ? 75
                                                                                            : skill.proficiencyLevel ===
                                                                                                "Intermediate"
                                                                                                ? 60
                                                                                                : 40}%`
                                                                                } }) })] }, skill.id))) })] })] })), careerData?.skills &&
                                                careerData.skills.length > 0 &&
                                                careerData.skills.filter((skill) => skill.category === "technical" ||
                                                    skill.category === "soft").length === 0 && (_jsxs("div", { children: [_jsx("h3", { className: "font-medium mb-3", children: "Skills" }), _jsx("div", { className: "space-y-4", children: careerData.skills.map((skill) => (_jsxs("div", { children: [_jsxs("div", { className: "flex justify-between mb-1", children: [_jsx("span", { className: "text-sm font-medium", children: skill.name }), _jsx("span", { className: "text-xs text-muted-foreground", children: skill.proficiencyLevel || "Beginner" })] }), _jsx("div", { className: "h-2 bg-primary/10 rounded-full", children: _jsx("div", { className: "h-2 bg-primary rounded-full", style: {
                                                                            width: `${skill.proficiencyLevel === "Expert"
                                                                                ? 90
                                                                                : skill.proficiencyLevel === "Advanced"
                                                                                    ? 75
                                                                                    : skill.proficiencyLevel ===
                                                                                        "Intermediate"
                                                                                        ? 60
                                                                                        : 40}%`
                                                                        } }) })] }, skill.id))) })] })), (!careerData?.skills || careerData.skills.length === 0) && (_jsx("p", { className: "text-sm text-muted-foreground text-center py-8", children: "No skills added yet" }))] }) })] }) }), _jsx(TabsContent, { value: "achievements", children: _jsxs(Card, { children: [_jsxs(CardHeader, { children: [_jsx(CardTitle, { children: "Career Achievements" }), _jsx(CardDescription, { children: "Unlock achievements as you progress in your career journey" })] }), _jsxs(CardContent, { children: [_jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4", children: achievements && achievements.length > 0 ? (achievements.map((achievement) => (_jsxs(Card, { className: "border-primary/10 overflow-hidden", children: [_jsx("div", { className: "h-2 bg-gradient-to-r from-primary to-primary/50" }), _jsxs(CardContent, { className: "pt-6", children: [_jsx("div", { className: "h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center mb-4", children: _jsx(Award, { className: "h-6 w-6 text-primary" }) }), _jsx("h3", { className: "font-medium", children: achievement.title }), _jsx("p", { className: "text-sm text-muted-foreground", children: achievement.description }), achievement.xpReward && (_jsxs("div", { className: "mt-2 text-xs text-primary", children: ["+", achievement.xpReward, " XP"] })), _jsx(Badge, { className: "mt-4", variant: "outline", children: achievement.unlockedAt
                                                                    ? `Unlocked ${new Date(achievement.unlockedAt).toLocaleDateString("en-US", {
                                                                        month: "short",
                                                                        day: "numeric",
                                                                        year: "numeric"
                                                                    })}`
                                                                    : "Locked" })] })] }, achievement.id)))) : (_jsx("div", { className: "col-span-1 md:col-span-2 lg:col-span-3 text-center py-8", children: _jsx("p", { className: "text-muted-foreground", children: "No achievements unlocked yet. Start completing goals and using features to earn achievements!" }) })) }), _jsxs("div", { className: "mt-8", children: [_jsx("h3", { className: "font-medium mb-4", children: "XP Progression" }), _jsx("div", { className: "h-2 bg-gray-100 rounded-full mb-2", children: _jsx("div", { className: "h-2 bg-primary rounded-full", style: {
                                                            width: `${Math.min(((user?.xp || 0) / 1000) * 100, 100)}%`
                                                        } }) }), _jsxs("div", { className: "flex justify-between text-xs text-muted-foreground", children: [_jsxs("span", { children: ["Level ", user?.level || 1] }), _jsxs("span", { children: [user?.xp || 0, " / 1000 XP"] }), _jsxs("span", { children: ["Level ", (user?.level || 1) + 1] })] })] })] })] }) })] }), _jsxs(Card, { className: "mb-8", children: [_jsxs(CardHeader, { children: [_jsxs(CardTitle, { className: "flex justify-between items-center", children: [_jsx("span", { children: "Your Documents" }), _jsxs(Button, { variant: "ghost", size: "sm", children: [_jsx(Plus, { className: "h-4 w-4 mr-2" }), "Create New"] })] }), _jsx(CardDescription, { children: "Quick access to your resumes and cover letters" })] }), _jsx(CardContent, { children: _jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: _jsxs("div", { className: "col-span-1 md:col-span-2 text-center py-8", children: [_jsx("p", { className: "text-muted-foreground mb-4", children: "No documents created yet. Start by creating your first resume or cover letter." }), _jsxs(Button, { onClick: () => (window.location.href = "/resume"), children: [_jsx(Plus, { className: "h-4 w-4 mr-2" }), "Create Resume"] })] }) }) })] })] }));
}
