import React, { useState, useEffect } from 'react';
import { useUser, useChangeEmail, useChangePassword } from '@/lib/useUserData';
import { useToast } from '@/hooks/use-toast';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { loadStripe } from '@stripe/stripe-js';
import { 
  Elements, 
  PaymentElement,
  useStripe, 
  useElements,
  AddressElement
} from '@stripe/react-stripe-js';

// Import UI components
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Progress } from '@/components/ui/progress';
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Slider } from '@/components/ui/slider';
import {
  User, CreditCard, ShieldCheck, Edit, CheckCircle2, Loader2, Sparkles, CreditCardIcon, RotateCcw,
  Building, GraduationCap, Trophy, BookOpen, Award, Languages, MapPin, Users, Plus, Settings,
  Palette
} from 'lucide-react';
import EmailChangeForm, { EmailChangeFormValues } from '@/components/EmailChangeForm';
import { z } from 'zod';

// Define the forms validation schemas
const passwordChangeSchema = z.object({
  currentPassword: z.string().min(8, "Must be at least 8 characters long"),
  newPassword: z.string().min(8, "Must be at least 8 characters long"),
  confirmPassword: z.string().min(8, "Must be at least 8 characters long"),
}).refine((data) => data.newPassword === data.confirmPassword, {
  message: "New passwords don't match",
  path: ["confirmPassword"],
}).refine((data) => data.currentPassword !== data.newPassword, {
  message: "New password must be different from current password",
  path: ["newPassword"],
});

type PasswordChangeFormValues = z.infer<typeof passwordChangeSchema>;

// Profile form schema
const profileSchema = z.object({
  name: z.string().min(2, "Name must be at least 2 characters long"),
  email: z.string().email("Please enter a valid email address"),
  username: z.string().min(3, "Username must be at least 3 characters long")
    .max(20, "Username cannot exceed 20 characters")
    .regex(/^[a-zA-Z0-9_]+$/, "Username can only contain letters, numbers, and underscores"),
});

function PasswordChangeForm({ 
  isPending, 
  onSubmit 
}: { 
  isPending: boolean;
  onSubmit: (data: PasswordChangeFormValues) => void;
}) {
  const form = useForm<PasswordChangeFormValues>({
    resolver: zodResolver(passwordChangeSchema),
    defaultValues: {
      currentPassword: '',
      newPassword: '',
      confirmPassword: '',
    },
  });

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4 py-2">
        <FormField
          control={form.control}
          name="currentPassword"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Current Password</FormLabel>
              <FormControl>
                <Input type="password" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="newPassword"
          render={({ field }) => (
            <FormItem>
              <FormLabel>New Password</FormLabel>
              <FormControl>
                <Input type="password" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="confirmPassword"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Confirm New Password</FormLabel>
              <FormControl>
                <Input type="password" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <DialogFooter>
          <Button type="submit" disabled={isPending}>
            {isPending ? <Loader2 className="h-4 w-4 mr-2 animate-spin" /> : null}
            {isPending ? "Changing Password..." : "Change Password"}
          </Button>
        </DialogFooter>
      </form>
    </Form>
  );
}

function PaymentMethodForm({ 
  onSuccess,
  onCancel
}: {
  onSuccess: () => void;
  onCancel: () => void;
}) {
  const stripe = useStripe();
  const elements = useElements();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [paymentError, setPaymentError] = useState<string | null>(null);
  const { toast } = useToast();

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    if (!stripe || !elements) {
      return;
    }

    setIsSubmitting(true);
    setPaymentError(null);

    const { error } = await stripe.confirmSetup({
      elements,
      confirmParams: {
        return_url: `${window.location.origin}/account?payment_success=true`,
      },
      redirect: 'if_required',
    });

    if (error) {
      setPaymentError(error.message || 'An error occurred while processing your payment method.');
      setIsSubmitting(false);
    } else {
      // If we get here, the setup was successful
      onSuccess();
    }
  };

  return (
    <div>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div className="space-y-2">
          <PaymentElement />
          
          {paymentError && (
            <div className="text-sm text-red-500 mt-2">{paymentError}</div>
          )}
        </div>
        <div className="flex justify-end space-x-2">
          <Button type="button" variant="outline" onClick={onCancel}>
            Cancel
          </Button>
          <Button type="submit" disabled={!stripe || isSubmitting}>
            {isSubmitting ? (
              <>
                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                Processing...
              </>
            ) : (
              'Save Payment Method'
            )}
          </Button>
        </div>
      </form>
    </div>
  );
}

const stripePromise = loadStripe(process.env.STRIPE_PUBLISHABLE_KEY || 'pk_test_placeholder');

export default function Account() {
  const { user, updateUser, logout } = useUser();
  const { toast } = useToast();
  const changePasswordMutation = useChangePassword();
  const changeEmailMutation = useChangeEmail();
  
  // Profile editing state
  const [isEditingProfile, setIsEditingProfile] = useState(false);
  
  // Password changing state
  const [isChangingPassword, setIsChangingPassword] = useState(false);
  
  // Email changing state
  const [isChangingEmail, setIsChangingEmail] = useState(false);
  
  // Subscription management states
  const [isUpgradingPlan, setIsUpgradingPlan] = useState(false);
  const [isManagingPaymentMethods, setIsManagingPaymentMethods] = useState(false);
  const [setupIntentClientSecret, setSetupIntentClientSecret] = useState<string | null>(null);
  const [billingCycle, setBillingCycle] = useState<'monthly' | 'quarterly' | 'annual'>('monthly');
  const [isLoading, setIsLoading] = useState(false);
  const [paymentMethodInfo, setPaymentMethodInfo] = useState<any>(null);
  
  // Profile form
  const profileForm = useForm({
    resolver: zodResolver(profileSchema),
    defaultValues: {
      name: user?.name || '',
      email: user?.email || '',
      username: user?.username || '',
    },
  });
  
  // Theme customization
  const [customColor, setCustomColor] = useState<string>(user?.theme?.primary || "#6366F1");
  const [isUpdatingTheme, setIsUpdatingTheme] = useState(false);

  // Theme selection functions - stubs since we removed those sections
  const updateTheme = (themeUpdate: any) => {
    // Implementation stub
  };
  
  const resetTheme = () => {
    // Implementation stub
  };
  
  const applyTheme = () => {
    // Implementation stub
  };
  
  // Handle profile edit submission
  const handleProfileSubmit = async (data: any) => {
    try {
      await updateUser(data);
      toast({
        title: "Profile Updated",
        description: "Your profile has been updated successfully.",
        variant: "default",
      });
      setIsEditingProfile(false);
    } catch (error: any) {
      toast({
        title: "Error Updating Profile",
        description: error.message || "There was an error updating your profile.",
        variant: "destructive",
      });
    }
  };
  
  // Handle logout
  const handleLogout = () => {
    logout();
    toast({
      title: "Logged Out",
      description: "You have been successfully logged out.",
      variant: "default",
    });
  };
  
  // Handle profile editing
  const handleEditProfile = () => {
    profileForm.reset({
      name: user?.name || '',
      email: user?.email || '',
      username: user?.username || '',
    });
    setIsEditingProfile(true);
  };
  
  // Handle section editing for career profile sections
  const handleEditSection = (sectionId: string) => {
    toast({
      title: "Edit Section",
      description: `Editing ${sectionId} section. This feature is coming soon.`,
      variant: "default",
    });
  };
  
  // Subscription upgrade
  const upgradeSubscription = (cycle: 'monthly' | 'quarterly' | 'annual') => {
    // Stub implementation
    toast({
      title: "Subscription Upgrade",
      description: `Your subscription will be upgraded to the ${cycle} plan. This feature is coming soon.`,
      variant: "default",
    });
    setIsUpgradingPlan(false);
  };
  
  // Payment methods
  const fetchPaymentMethodInfo = async () => {
    // Stub implementation for payment method info
    setPaymentMethodInfo({
      brand: 'visa',
      last4: '4242',
      exp_month: '12',
      exp_year: '2025'
    });
  };
  
  const initializePaymentMethodsUpdate = async () => {
    setIsLoading(true);
    try {
      // Stub for setup intent
      setTimeout(() => {
        setSetupIntentClientSecret('pi_mock_setup_intent_123');
        setIsLoading(false);
      }, 1000);
    } catch (error) {
      setIsLoading(false);
      toast({
        title: "Error",
        description: "Failed to initialize payment method update.",
        variant: "destructive",
      });
    }
  };
  
  // Profile completion data
  const profileSections = [
    { id: 'basic-info', title: 'Basic Information', completed: true },
    { id: 'work-history', title: 'Work History', completed: false },
    { id: 'education', title: 'Education', completed: false },
    { id: 'skills', title: 'Skills', completed: false },
    { id: 'certifications', title: 'Certifications', completed: false },
    { id: 'languages', title: 'Languages', completed: false },
    { id: 'career-summary', title: 'Career Summary', completed: false },
    { id: 'location-preferences', title: 'Location Preferences', completed: false },
  ];
  
  const completionPercentage = (profileSections.filter(s => s.completed).length / profileSections.length) * 100;
  
  // Fetch user data when component mounts
  useEffect(() => {
    if (user) {
      profileForm.reset({
        name: user.name || '',
        email: user.email || '',
        username: user.username || '',
      });
      
      // Set theme default values
      setCustomColor(user.theme?.primary || "#6366F1");
      
      // Fetch payment method info if user is on a paid plan
      if (user.subscription?.status === 'active') {
        fetchPaymentMethodInfo();
      }
    }
  }, [user, profileForm]);

  if (!user) return null;

  return (
    <div className="container max-w-5xl py-8">
      <h1 className="text-2xl font-bold mb-6">Account Settings</h1>

      <Tabs defaultValue="profile" className="w-full">
        <TabsList className="mb-6">
          <TabsTrigger value="profile" className="flex items-center">
            <User className="mr-2 h-4 w-4" />
            Profile
          </TabsTrigger>
          <TabsTrigger value="subscription" className="flex items-center">
            <CreditCard className="mr-2 h-4 w-4" />
            Subscription
          </TabsTrigger>

          <TabsTrigger value="security" className="flex items-center">
            <ShieldCheck className="mr-2 h-4 w-4" />
            Security
          </TabsTrigger>
        </TabsList>

        <TabsContent value="profile" className="space-y-6">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <CardTitle>Profile Information</CardTitle>
              <Button variant="outline" size="sm" onClick={handleEditProfile}>
                <Edit className="mr-2 h-4 w-4" />
                Edit Profile
              </Button>
            </CardHeader>
            <CardContent className="grid grid-cols-2 gap-4">
              <div>
                <h3 className="font-medium text-sm text-muted-foreground">Name</h3>
                <p>{user.name}</p>
              </div>
              <div>
                <h3 className="font-medium text-sm text-muted-foreground">Email</h3>
                <p>{user.email}</p>
              </div>
              <div>
                <h3 className="font-medium text-sm text-muted-foreground">Username</h3>
                <p>{user.username}</p>
              </div>
              <div>
                <h3 className="font-medium text-sm text-muted-foreground">Account Created</h3>
                <p>March 15, 2025</p>
              </div>
              <div>
                <h3 className="font-medium text-sm text-muted-foreground">User Type</h3>
                <p className="capitalize">{user.userType ? user.userType.replace('_', ' ') : 'Standard'}</p>
              </div>
            </CardContent>
          </Card>

          {/* Profile Edit Dialog */}
          <Dialog open={isEditingProfile} onOpenChange={setIsEditingProfile}>
            <DialogContent className="sm:max-w-[425px]">
              <DialogHeader>
                <DialogTitle>Edit Profile</DialogTitle>
                <DialogDescription>
                  Make changes to your profile information here.
                </DialogDescription>
              </DialogHeader>
              <Form {...profileForm}>
                <form onSubmit={profileForm.handleSubmit(handleProfileSubmit)} className="space-y-4 py-4">
                  <FormField
                    control={profileForm.control}
                    name="name"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Name</FormLabel>
                        <FormControl>
                          <Input placeholder="Your name" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={profileForm.control}
                    name="email"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Email</FormLabel>
                        <FormControl>
                          <Input type="email" placeholder="Your email" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={profileForm.control}
                    name="username"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Username</FormLabel>
                        <FormControl>
                          <Input placeholder="Your username" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <DialogFooter className="mt-6">
                    <Button type="button" variant="outline" onClick={() => setIsEditingProfile(false)}>
                      Cancel
                    </Button>
                    <Button type="submit">Save Changes</Button>
                  </DialogFooter>
                </form>
              </Form>
            </DialogContent>
          </Dialog>
          {/* Profile Completion Tracker */}
          <Card className="mt-6">
            <CardHeader className="pb-3">
              <CardTitle>Profile Completion</CardTitle>
              <CardDescription>Complete your career profile to maximize your opportunities</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="mb-2 flex items-center justify-between">
                <span className="text-sm font-medium">
                  {Math.round(completionPercentage)}% Complete
                </span>
                <span className="text-sm text-muted-foreground">
                  {profileSections.filter(section => section.completed).length}/{profileSections.length} Sections
                </span>
              </div>
              <Progress value={completionPercentage} className="h-2 mb-4" />
            </CardContent>
          </Card>
          
          {/* Work History Section */}
          <Card className="mt-6">
            <CardHeader className="pb-3">
              <div className="flex justify-between items-center">
                <div className="flex items-center">
                  <Building className="h-5 w-5 mr-2 text-primary" />
                  <CardTitle>Work History</CardTitle>
                </div>
                <Button variant="outline" size="sm" onClick={() => handleEditSection('work-history')}>
                  <Edit className="h-4 w-4 mr-1" /> Edit
                </Button>
              </div>
              <CardDescription>Your professional experience</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="text-center py-6 text-muted-foreground">
                <p>No work history added yet</p>
                <p className="text-sm mt-2">Add your professional experience to showcase your career progression</p>
              </div>
            </CardContent>
          </Card>
          
          {/* Education Section */}
          <Card className="mt-6">
            <CardHeader className="pb-3">
              <div className="flex justify-between items-center">
                <div className="flex items-center">
                  <GraduationCap className="h-5 w-5 mr-2 text-primary" />
                  <CardTitle>Education</CardTitle>
                </div>
                <Button variant="outline" size="sm" onClick={() => handleEditSection('education')}>
                  <Edit className="h-4 w-4 mr-1" /> Edit
                </Button>
              </div>
              <CardDescription>Your educational background</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="text-center py-6 text-muted-foreground">
                <p>No education history added yet</p>
                <p className="text-sm mt-2">Add your degrees, certifications, and educational achievements</p>
              </div>
            </CardContent>
          </Card>
           
          {/* HIDDEN THEME COMPONENTS - DON'T SHOW */}
          <Card className="hidden">
            <CardHeader>
              <CardTitle>Theme Settings</CardTitle>
              <CardDescription>Customize the app appearance</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                {/* Theme settings content would go here */}
              </div>
            </CardContent>
            <CardFooter className="border-t pt-6">
              <Button 
                onClick={() => {
                  resetTheme();
                  applyTheme();
                }} 
                variant="outline" 
                className="mr-2"
              >
                <RotateCcw className="h-4 w-4 mr-2" />
                Reset to Defaults
              </Button>
              <Button onClick={() => applyTheme()} disabled={isUpdatingTheme}>
                {isUpdatingTheme ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    Updating...
                  </>
                ) : (
                  'Apply Changes'
                )}
              </Button>
            </CardFooter>
          </Card>
        </TabsContent>

        <TabsContent value="subscription" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Subscription Details</CardTitle>
              <CardDescription>
                Manage your subscription plan and payment methods
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {user.subscription?.status === 'active' ? (
                <div className="space-y-4">
                  <div className="rounded-md border p-4">
                    <div className="flex justify-between items-center">
                      <div className="flex gap-3 items-center">
                        <div className="p-3 bg-primary/10 rounded-full">
                          <Sparkles className="h-5 w-5 text-primary" />
                        </div>
                        <div>
                          <p className="font-medium text-lg">Pro Plan</p>
                          <p className="text-sm text-muted-foreground">
                            {user.subscription?.currentPeriodEnd ? (
                              `Renews on ${new Date(user.subscription.currentPeriodEnd).toLocaleDateString()}`
                            ) : 'Active'}
                          </p>
                        </div>
                      </div>
                      <div>
                        <span className="inline-flex items-center rounded-full bg-green-100 px-2.5 py-0.5 text-sm font-medium text-green-800">
                          Active
                        </span>
                      </div>
                    </div>
                  </div>

                  <div className="grid gap-4 md:grid-cols-2">
                    <div className="rounded-md border p-4">
                      <div className="flex flex-col h-full">
                        <h3 className="font-medium mb-2">Billing Details</h3>
                        <div className="text-sm text-muted-foreground space-y-1">
                          <p>Next billing date: {user.subscription?.currentPeriodEnd ? new Date(user.subscription.currentPeriodEnd).toLocaleDateString() : 'N/A'}</p>
                          <p>Billing cycle: {user.subscription?.interval || 'Monthly'}</p>
                          <p>Amount: ${user.subscription?.amount ? (user.subscription.amount / 100).toFixed(2) : '15.00'}</p>
                        </div>
                        <div className="mt-auto pt-4">
                          <Button variant="outline" size="sm">
                            Update Plan
                          </Button>
                        </div>
                      </div>
                    </div>

                    <div className="rounded-md border p-4">
                      <div className="flex flex-col h-full">
                        <h3 className="font-medium mb-2">Payment Method</h3>
                        {paymentMethodInfo ? (
                          <div className="flex items-center">
                            <div className="p-2 bg-muted rounded-md mr-3">
                              <CreditCardIcon className="h-5 w-5" />
                            </div>
                            <div className="text-sm">
                              <p className="capitalize">{paymentMethodInfo.brand} •••• {paymentMethodInfo.last4}</p>
                              <p className="text-muted-foreground">Expires {paymentMethodInfo.exp_month}/{paymentMethodInfo.exp_year}</p>
                            </div>
                          </div>
                        ) : (
                          <p className="text-sm text-muted-foreground">No payment method on file</p>
                        )}
                        <div className="mt-auto pt-4">
                          <Button 
                            variant="outline" 
                            size="sm"
                            onClick={() => setIsManagingPaymentMethods(true)}
                          >
                            {paymentMethodInfo ? 'Update Payment Method' : 'Add Payment Method'}
                          </Button>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="rounded-md border p-4 bg-muted">
                    <h3 className="font-medium mb-2">Cancel Subscription</h3>
                    <p className="text-sm text-muted-foreground mb-3">
                      You can cancel your subscription at any time. Your account will remain active until the end of your current billing period.
                    </p>
                    <Button variant="destructive" size="sm">
                      Cancel Subscription
                    </Button>
                  </div>
                </div>
              ) : (
                <div className="py-4 space-y-6">
                  <div className="text-center py-6">
                    <Sparkles className="h-10 w-10 text-primary mx-auto mb-3" />
                    <h2 className="text-xl font-semibold mb-2">Upgrade to Pro</h2>
                    <p className="text-muted-foreground mb-4">
                      Unlock premium features to accelerate your career growth
                    </p>
                    <Button onClick={() => setIsUpgradingPlan(true)}>
                      Upgrade Now
                    </Button>
                  </div>

                  <div className="grid gap-4 sm:grid-cols-3">
                    <div className="rounded-md border p-4 flex flex-col">
                      <div className="p-2 bg-primary/10 rounded-full self-start mb-2">
                        <FileText className="h-4 w-4 text-primary" />
                      </div>
                      <h3 className="font-medium mb-1">Unlimited Resumes</h3>
                      <p className="text-sm text-muted-foreground">Create and store multiple resumes</p>
                    </div>
                    <div className="rounded-md border p-4 flex flex-col">
                      <div className="p-2 bg-primary/10 rounded-full self-start mb-2">
                        <Briefcase className="h-4 w-4 text-primary" />
                      </div>
                      <h3 className="font-medium mb-1">Interview Coach</h3>
                      <p className="text-sm text-muted-foreground">AI-powered interview preparation</p>
                    </div>
                    <div className="rounded-md border p-4 flex flex-col">
                      <div className="p-2 bg-primary/10 rounded-full self-start mb-2">
                        <Bot className="h-4 w-4 text-primary" />
                      </div>
                      <h3 className="font-medium mb-1">AI Career Coach</h3>
                      <p className="text-sm text-muted-foreground">Personalized career guidance</p>
                    </div>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="security" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Email Verification</CardTitle>
              <CardDescription>
                Your email address is verified. You can change it if needed.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex justify-between items-center">
                <div>
                  <div className="font-medium">{user.email}</div>
                  <div className="text-sm text-muted-foreground">
                    {user.emailVerified ? (
                      <span className="flex items-center text-green-600">
                        <CheckCircle2 className="h-4 w-4 mr-1" />
                        Verified
                      </span>
                    ) : (
                      <span className="text-amber-600">Not verified</span>
                    )}
                  </div>
                </div>
                <Button variant="outline" onClick={() => setIsChangingEmail(true)}>
                  Change Email
                </Button>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Password</CardTitle>
              <CardDescription>
                Update your password to keep your account secure.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="flex justify-between items-center">
                <div>
                  <div className="font-medium">Password</div>
                  <div className="text-sm text-muted-foreground">
                    Last changed on {user.passwordLastChanged ? 
                      new Date(user.passwordLastChanged).toLocaleDateString() : 
                      'Never'
                    }
                  </div>
                </div>
                <Button onClick={() => setIsChangingPassword(true)}>
                  Change Password
                </Button>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Sign Out</CardTitle>
              <CardDescription>
                Sign out of your account on this device.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Button variant="outline" onClick={handleLogout}>
                Sign Out
              </Button>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>

    {/* Password Change Dialog */}
    <Dialog open={isChangingPassword} onOpenChange={setIsChangingPassword}>
      <DialogContent className="sm:max-w-[450px]">
        <DialogHeader>
          <DialogTitle>Change Password</DialogTitle>
          <DialogDescription>
            Enter your current password and choose a new secure password.
          </DialogDescription>
        </DialogHeader>

        <PasswordChangeForm 
          isPending={changePasswordMutation.isPending}
          onSubmit={(data) => {
            changePasswordMutation.mutate(
              { 
                currentPassword: data.currentPassword,
                newPassword: data.newPassword
              },
              {
                onSuccess: () => {
                  toast({
                    title: "Password Changed",
                    description: "Your password has been updated successfully.",
                    variant: "default",
                  });
                  setIsChangingPassword(false);
                },
                onError: (error: any) => {
                  toast({
                    title: "Failed to change password",
                    description: error.message || "An error occurred. Please check your current password and try again.",
                    variant: "destructive",
                  });
                }
              }
            );
          }}
        />
      </DialogContent>
    </Dialog>

    {/* Email Change Dialog */}
    <Dialog open={isChangingEmail} onOpenChange={setIsChangingEmail}>
      <DialogContent className="sm:max-w-[450px]">
        <DialogHeader>
          <DialogTitle>Change Email Address</DialogTitle>
          <DialogDescription>
            Enter your new email address and current password to verify your identity.
            You will need to verify your new email before the change takes effect.
          </DialogDescription>
        </DialogHeader>

        {changeEmailMutation.isPending ? (
          <div className="py-8 flex items-center justify-center flex-col">
            <div className="h-12 w-12 rounded-full border-4 border-primary border-t-transparent animate-spin"></div>
            <p className="mt-4 text-sm text-muted-foreground">Processing your request...</p>
          </div>
        ) : (
          <EmailChangeForm 
            currentEmail={user.email} 
            onSubmit={(data) => {
              changeEmailMutation.mutate(data, {
                onSuccess: () => {
                  toast({
                    title: "Verification email sent",
                    description: "Please check your inbox to complete the email change.",
                    variant: "default",
                  });
                  setIsChangingEmail(false);
                },
                onError: (error: any) => {
                  toast({
                    title: "Failed to send verification",
                    description: error.message || "An error occurred while processing your request.",
                    variant: "destructive",
                  });
                }
              });
            }}
          />
        )}
      </DialogContent>
    </Dialog>

    {/* Upgrade Plan Dialog for Free Users */}
    <Dialog open={isUpgradingPlan} onOpenChange={setIsUpgradingPlan}>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle>Upgrade to Pro</DialogTitle>
          <DialogDescription>
            Unlock all premium features to accelerate your career growth.
          </DialogDescription>
        </DialogHeader>
        <div className="py-6">
          <div className="rounded-xl bg-primary/5 p-5 border border-primary/20 mb-6">
            <h3 className="font-semibold text-lg mb-3 flex items-center">
              <Sparkles className="h-5 w-5 mr-2 text-primary" />
              Pro Plan Benefits
            </h3>
            <ul className="space-y-3">
              <li className="flex items-start">
                <CheckCircle2 className="h-5 w-5 mr-2 text-primary shrink-0 mt-0.5" />
                <div>
                  <span className="font-medium">Advanced Resume Builder</span>
                  <p className="text-sm text-muted-foreground">Create unlimited professional resumes with AI enhancement</p>
                </div>
              </li>
              <li className="flex items-start">
                <CheckCircle2 className="h-5 w-5 mr-2 text-primary shrink-0 mt-0.5" />
                <div>
                  <span className="font-medium">Unlimited Interview Practice</span>
                  <p className="text-sm text-muted-foreground">Practice with unlimited AI-generated questions and feedback</p>
                </div>
              </li>
              <li className="flex items-start">
                <CheckCircle2 className="h-5 w-5 mr-2 text-primary shrink-0 mt-0.5" />
                <div>
                  <span className="font-medium">AI Career Coach</span>
                  <p className="text-sm text-muted-foreground">Get personalized career advice whenever you need it</p>
                </div>
              </li>
              <li className="flex items-start">
                <CheckCircle2 className="h-5 w-5 mr-2 text-primary shrink-0 mt-0.5" />
                <div>
                  <span className="font-medium">Cover Letter Generator</span>
                  <p className="text-sm text-muted-foreground">Create tailored cover letters for every application</p>
                </div>
              </li>
            </ul>
          </div>

          {/* Billing cycle tabs */}
          <div className="mb-6">
            <Tabs defaultValue="monthly" className="w-full" onValueChange={(value) => setBillingCycle(value as 'monthly' | 'quarterly' | 'annual')}>
              <TabsList className="grid w-full grid-cols-3">
                <TabsTrigger value="monthly">Monthly</TabsTrigger>
                <TabsTrigger value="quarterly">Quarterly</TabsTrigger>
                <TabsTrigger value="annual">Annual</TabsTrigger>
              </TabsList>
              <TabsContent value="monthly" className="pt-4">
                <div className="flex justify-between items-center">
                  <div>
                    <p className="text-lg font-semibold">$15.00 <span className="text-sm font-normal text-muted-foreground">/ month</span></p>
                    <p className="text-sm text-muted-foreground">Cancel anytime</p>
                  </div>
                  <div className="space-x-2">
                    <Button variant="outline" onClick={() => setIsUpgradingPlan(false)}>Cancel</Button>
                    <Button onClick={() => upgradeSubscription('monthly')}>Upgrade Now</Button>
                  </div>
                </div>
              </TabsContent>
              <TabsContent value="quarterly" className="pt-4">
                <div className="flex justify-between items-center">
                  <div>
                    <div className="flex items-center">
                      <p className="text-lg font-semibold">$30.00 <span className="text-sm font-normal text-muted-foreground">/ 3 months</span></p>
                      <span className="ml-2 text-xs font-medium text-green-600 bg-green-100 rounded-full px-2 py-0.5">Save $15</span>
                    </div>
                    <p className="text-sm text-muted-foreground">$10.00 per month, billed quarterly</p>
                  </div>
                  <div className="space-x-2">
                    <Button variant="outline" onClick={() => setIsUpgradingPlan(false)}>Cancel</Button>
                    <Button onClick={() => upgradeSubscription('quarterly')}>Upgrade Now</Button>
                  </div>
                </div>
              </TabsContent>
              <TabsContent value="annual" className="pt-4">
                <div className="flex justify-between items-center">
                  <div>
                    <div className="flex items-center">
                      <p className="text-lg font-semibold">$72.00 <span className="text-sm font-normal text-muted-foreground">/ year</span></p>
                      <span className="ml-2 text-xs font-medium text-green-600 bg-green-100 rounded-full px-2 py-0.5">Save $108</span>
                    </div>
                    <p className="text-sm text-muted-foreground">$6.00 per month, billed annually</p>
                  </div>
                  <div className="space-x-2">
                    <Button variant="outline" onClick={() => setIsUpgradingPlan(false)}>Cancel</Button>
                    <Button onClick={() => upgradeSubscription('annual')}>Upgrade Now</Button>
                  </div>
                </div>
              </TabsContent>
            </Tabs>
          </div>
        </div>
      </DialogContent>
    </Dialog>

    {/* Payment Methods Management Dialog */}
    <Dialog open={isManagingPaymentMethods} onOpenChange={setIsManagingPaymentMethods}>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle>Payment Methods</DialogTitle>
          <DialogDescription>
            Manage your payment methods for subscription billing.
          </DialogDescription>
        </DialogHeader>

        {!setupIntentClientSecret ? (
          <div className="py-6 space-y-4">
            {/* Current Payment Method */}
            {paymentMethodInfo ? (
              <div className="rounded-md border p-4">
                <h3 className="font-medium mb-3">Current Payment Method</h3>
                <div className="flex items-center">
                  <div className="p-3 bg-muted rounded-md mr-4">
                    <CreditCardIcon className="h-6 w-6" />
                  </div>
                  <div>
                    <p className="font-medium capitalize">{paymentMethodInfo.brand} •••• {paymentMethodInfo.last4}</p>
                    <p className="text-sm text-muted-foreground">
                      Expires {paymentMethodInfo.exp_month}/{paymentMethodInfo.exp_year}
                    </p>
                  </div>
                </div>
              </div>
            ) : (
              <div className="rounded-md border p-4 text-center py-8">
                <p className="text-muted-foreground mb-2">No payment methods found</p>
                <p className="text-sm text-muted-foreground">Add a payment method to manage your subscription</p>
              </div>
            )}

            <div className="flex justify-end">
              <Button 
                onClick={initializePaymentMethodsUpdate}
                disabled={isLoading}
              >
                {isLoading ? (
                  <><Loader2 className="h-4 w-4 mr-2 animate-spin" /> Loading...</>
                ) : (
                  <>{paymentMethodInfo ? 'Update Payment Method' : 'Add Payment Method'}</>
                )}
              </Button>
            </div>
          </div>
        ) : (
          <div className="py-6">
            <Elements stripe={stripePromise} options={{ clientSecret: setupIntentClientSecret }}>
              <PaymentMethodForm 
                onSuccess={() => {
                  setIsManagingPaymentMethods(false);
                  setSetupIntentClientSecret(null);
                  fetchPaymentMethodInfo();
                  toast({
                    title: "Payment method updated",
                    description: "Your payment method has been updated successfully.",
                    variant: "default",
                  });
                }}
                onCancel={() => {
                  setSetupIntentClientSecret(null);
                }}
              />
            </Elements>
          </div>
        )}
      </DialogContent>
    </Dialog>
  </div>
  );
}