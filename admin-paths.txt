client/src/pages/admin/SupportPage.tsx:15:      const response = await fetch('/api/admin/support-tickets');
client/src/pages/admin/OpenAILogsPage.tsx:56:    queryKey: ['/api/admin/openai-logs'],
client/src/pages/admin/OpenAILogsPage.tsx:62:    queryKey: ['/api/admin/openai-stats/models'],
client/src/pages/admin/OpenAILogsPage.tsx:68:    queryKey: ['/api/admin/openai-stats/users'],
client/src/pages/admin/OpenAILogsPage.tsx:74:    window.open('/api/admin/openai-logs/export', '_blank');
client/src/pages/admin/UserManagement.tsx:153:    queryKey: ['/api/admin/users', searchTerm, filters, currentPage],
client/src/pages/admin/UserManagement.tsx:163:      // await apiRequest('PUT', `/api/admin/users/${userId}/status`, { status });
client/src/pages/admin/UserManagement.tsx:168:      queryClient.setQueryData(['/api/admin/users', searchTerm, filters, currentPage], 
client/src/pages/admin/UserManagement.tsx:189:      // await apiRequest('PUT', `/api/admin/users/${userId}/subscription`, { plan });
client/src/pages/admin/UserManagement.tsx:194:      queryClient.setQueryData(['/api/admin/users', searchTerm, filters, currentPage], 
client/src/pages/admin/UserManagement.tsx:1071:      const res = await apiRequest('POST', '/api/admin/create-staff', values);
client/src/pages/admin/UserManagement.tsx:1086:      queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });
client/src/pages/admin/AdminOverview.tsx:51:    queryKey: ['/api/admin/users/stats'],
client/src/pages/admin/AdminOverview.tsx:92:              window.location.assign("/admin/universities");
client/src/pages/admin/Dashboard.tsx:117:      const res = await apiRequest('POST', '/admin/create-staff', values);
client/src/pages/admin/Dashboard.tsx:250:import { SupportAnalytics } from "@/components/admin/SupportAnalytics";
client/src/pages/admin/Dashboard.tsx:267:      const response = await fetch(`/api/admin/support-tickets?${queryParams}`);
client/src/pages/admin/Dashboard.tsx:396:  const [isUniversitiesRoute] = useRoute('/admin/universities');
client/src/pages/sign-up.tsx:97:          window.location.href = '/admin';
client/src/pages/admin-login.tsx:23:    console.log("Admin already logged in, redirecting to /admin. Role:", user.role, "Type:", user.userType);
client/src/pages/admin-login.tsx:24:    setLocation('/admin');
client/src/pages/admin-login.tsx:68:        // If no redirectPath is provided, default to /admin
client/src/pages/admin-login.tsx:69:        console.log("No redirectPath provided, defaulting to /admin");
client/src/pages/admin-login.tsx:70:        window.location.href = '/admin';
client/src/App.tsx:27:import AdminLogin from "@/pages/admin-login";
client/src/App.tsx:36:import AdminDashboard from "@/pages/admin/Dashboard";
client/src/App.tsx:37:import SupportPage from "@/pages/admin/SupportPage";
client/src/App.tsx:38:import AdminModelsPage from "@/pages/admin/ModelsPage";
client/src/App.tsx:39:import AdminOpenAILogsPage from "@/pages/admin/OpenAILogsPage";
client/src/App.tsx:40:import EmailAdmin from "@/pages/admin/EmailAdmin";
client/src/App.tsx:41:import UniversitiesPage from "@/pages/admin/Universities";
client/src/App.tsx:126:                    href="/university/admin"
client/src/App.tsx:128:                      location === "/university/admin" ? "text-foreground" : "text-foreground/60"
client/src/App.tsx:226:  const isPublicRoute = ["/home", "/pricing", "/solutions", "/who-we-serve", "/sign-in", "/sign-up", "/admin-login", "/staff-login", "/staff-signup", "/auth-test"].includes(location);
client/src/App.tsx:246:  if (isSignInRoute || isSignUpRoute || location === "/admin-login" || location === "/staff-login" || location === "/staff-signup") {
client/src/App.tsx:251:        <Route path="/admin-login" component={AdminLogin} />
client/src/App.tsx:348:  const isAdminRoute = (location.startsWith("/admin") && location !== "/admin-login") || location === "/admin-dashboard";
client/src/App.tsx:413:        <Route path="/admin-dashboard">
client/src/App.tsx:418:        <Route path="/admin/support">
client/src/App.tsx:423:        <Route path="/admin/support/:id">
client/src/App.tsx:428:        <Route path="/admin/models">
client/src/App.tsx:433:        <Route path="/admin/openai-logs">
client/src/App.tsx:438:        <Route path="/admin/email">
client/src/App.tsx:443:        <Route path="/admin/universities">
client/src/App.tsx:448:        <Route path="/admin">
client/src/App.tsx:595:        <Route path="/university/admin">
client/src/components/Sidebar.tsx:517:            href="/admin-dashboard"
client/src/components/Sidebar.tsx:519:              ${location.startsWith("/admin") || location === "/admin-dashboard" ? 'text-primary bg-primary/10' : ''}`}
client/src/components/LoginDialog.tsx:69:        window.location.href = '/admin';
client/src/components/RouteProtection.tsx:160:      setLocation('/admin');
client/src/components/RouteProtection.tsx:254:      setLocation('/admin-dashboard');
client/src/components/StaffLayout.tsx:42:  // If no user or not a staff/admin, show access denied
