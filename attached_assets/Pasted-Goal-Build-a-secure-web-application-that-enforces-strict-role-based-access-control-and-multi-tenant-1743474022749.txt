Goal: Build a secure web application that enforces strict role-based access control and multi-tenant data isolation. The app includes five types of users and each has different permissions.

✅ User Roles and Permissions
Regular Account User
Can log in at /sign-in
Can only access their own personal career app and dashboard
Cannot access any staff or admin pages
University Student (University Edition User)
Logs in at /sign-in and selects “University”
Can only access their own personal career app and dashboard
Cannot see or access other university students' data
Cannot access any staff or admin pages
University Admin
Can view and manage only student accounts belonging to their own university
Cannot view or access students from any other university
Cannot access any staff or admin dashboards
Staff User
Logs in at /staff-login
Can access staff pages only
Cannot access the admin dashboard
Cannot manage or create other staff or users
System Administrator
Logs in at /admin-login
Has full access to all areas
Can manage system-wide data
Can create and manage staff user accounts
Cannot be accessed by or confused with other user types
🔒 Security & Access Requirements
All users must only access data associated with their user ID or university.
Data from one university must never be accessible by another university’s users or admins.
Only the system admin can create new staff accounts.
Absolutely no regular users or university users can access staff or admin pages.
Unauthorized attempts must return a 403 Forbidden response.
All user roles must be authenticated and authorized with secure middleware before accessing protected routes.
Every database query should enforce row-level security based on user_id and/or university_id.
🧰 Stack & Implementation Suggestions (optional)
Use Express.js for routing
Use Passport.js or JWTs for authentication
Use middleware functions for role-based route protection
Use MongoDB or PostgreSQL with proper schema including user_type, user_id, university_id
Define access policies in a roles.js or authPolicy.js file
🔧 Example Routes to Protect
js
Copy
Edit
// Only regular and university users can access
GET /dashboard

// Only university admin can view students from their university
GET /university/students

// Only staff users
GET /staff-dashboard

// Only system admins
GET /admin-dashboard

// Only system admins can create staff users
POST /admin/create-staff
🧠 Instruction to Replit AI:
Build the app following this structure. Set up:

Authentication
User role-based access control
Middleware to protect each route
Row-level data filtering by user_id and university_id
Ensure complete isolation between universities
Prevent unauthorized access with appropriate status codes and logs
