// IMPLEMENT FULL UNIVERSITY MANAGEMENT INSIDE THE UNIVERSITIES TAB ON /admin PAGE

// This must support:
// - Adding universities
// - Viewing plan details
// - Editing plan tier, seat count, contract period
// - Managing university admins
// Aligned to the business model (university licenses with seat limits and plan tiers)

// ✅ 1. In the /admin route component:
// - Ensure the "Universities" tab renders a full management view
// - Confirm the tab system correctly switches to this view on click

// ✅ 2. Inside the Universities tab component:

// A. Display a list of universities with the following columns:
//    - Name
//    - Plan (e.g. "Pro — 500 seats")
//    - Usage (e.g. "134 / 500")
//    - Contract (start and end date)
//    - Status (Active / Expired based on current date vs. endDate)
//    - Actions: Edit Plan, Manage Access

// B. Add "Add University" button at the top:
//    - Opens a modal with form fields:
//      - Name (required)
//      - Plan Tier (dropdown: Basic, Pro, Enterprise)
//      - Seat Limit (number)
//      - Contract Start Date
//      - Contract End Date
//      - Admin Email (optional, triggers invite)

//    - On submit:
//      - Validate input
//      - POST to /api/universities
//      - Close modal and show toast on success
//      - Refetch universities list using React Query

// C. Implement "Edit Plan" modal:
//    - Triggered by Edit button in each row
//    - Fields: Plan Tier, Seat Limit, Start/End Dates
//    - Submits PUT /api/universities/:id
//    - Closes modal and updates list on success

// D. Implement "Manage Access" modal or redirect:
//    - Display current admins and active invites
//    - Allow sending new invites (POST /api/university-invites)
//    - Optionally allow role revocation or ownership transfer

// ✅ 3. Backend routes (in server/routes/universities.ts):

// - GET /api/universities
//   → Returns list of universities with id, name, planTier, seatLimit, usage, startDate, endDate

// - POST /api/universities
//   → Accepts form input, creates university, and sends invite if adminEmail is present

// - PUT /api/universities/:id
//   → Updates plan details

// ✅ 4. Database fields (in universities table):

// - id
// - name
// - planTier
// - seatLimit
// - startDate
// - endDate
// - createdAt / updatedAt
// - adminUserId (optional, or use invite workflow)

// ✅ 5. Admin access control:
// - Confirm this tab is only visible to platform super admins

// ✅ 6. Final checklist:
// - Display errors and loading states
// - Validate required fields in all modals
// - Show toast notifications on success/failure
// - Ensure tab maintains state on refresh (optional)

// Once complete, the Universities tab inside /admin will be production-ready for managing university clients
